/* min-breakpoint-mobile-wide :      480px */
/* $min-breakpoint-tablet :          768px */
/* $min-breakpoint-desktop :         980px */
/* $min-breakpoint-desktop-wide :    1280px */
/* $max-breakpoint-mobile-narrow :  479px */
/* $max-breakpoint-mobile :         767px */
/* $max-breakpoint-tablet :         979px */
/* $max-breakpoint-desktop :        1279px */
/* ! SipaUI - framework CSS et JS du groupe SIPA */
/* ! Version 0 0.1 */
/* Point de rupture desktop (980px) */
/* Point de rupture desktop (980px) */
/* Point de rupture desktop (980px) */
@media only screen and (min-width: 61.25em) {
  body {
    margin: 1rem auto;
    width: 80%; } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFyZ2UtZGVtby5jc3MiLCJzb3VyY2VzIjpbImxhcmdlLWRlbW8uc2NzcyIsIl92YXJpYWJsZXMuc2NzcyIsIi4uLy4uL3NpcGF1aS9zY3NzL2xhcmdlLXNpcGF1aS5zY3NzIiwiLi4vLi4vc2lwYXVpL3Njc3MvX3ZhcmlhYmxlcy5zY3NzIiwiLi4vLi4vc2lwYXVpL3Njc3MvX21peGlucy5zY3NzIiwiLi4vLi4vc2lwYXVpL3Njc3MvX3N1LW1lZGl1bS5zY3NzIiwiLi4vLi4vc2lwYXVpL3Njc3MvX3N1LWxhcmdlLnNjc3MiLCJfZGUtbGFyZ2Uuc2NzcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTaXRlIFNpcGFVSVxuLy8gQ1NTIHBvdXIgw6ljcmFucyBsYXJnZXNcbi8vXG5AaW1wb3J0ICd2YXJpYWJsZXMnO1xuQGltcG9ydCAnZGV2L3NyYy9zaXBhdWkvc2Nzcy9sYXJnZS1zaXBhdWknO1xuQGltcG9ydCAnZGUtbGFyZ2UnO1xuIiwiLy8gU2l0ZSBTaXBhVUlcbi8vIFZhcmlhYmxlc1xuLy9cbiIsIkBpbXBvcnQgJ3ZhcmlhYmxlcyc7XG5AaW1wb3J0ICdtaXhpbnMnO1xuXG4vLyBTaXBhVUlcbi8qICEgU2lwYVVJIC0gZnJhbWV3b3JrIENTUyBldCBKUyBkdSBncm91cGUgU0lQQSAqL1xuLyogISBWZXJzaW9uICN7JHZlcnNpb259ICovXG4vL1xuXG5AaW1wb3J0ICdfc3UtbWVkaXVtJztcbkBpbXBvcnQgJ19zdS1sYXJnZSc7XG5cbiIsIi8vIFNpcGFVSVxuLy8gVmFyaWFibGVzXG4vL1xuXG4vLyB2b2lyIGh0dHBzOi8vcm9ib3RzLnRob3VnaHRib3QuY29tL3Nhc3MtZGVmYXVsdCBwb3VyIGV4cGxpY2F0aW9ucyBzdXIgIWRlZmF1bHRcblxuXG4kdmVyc2lvbjogICAgICAgICAgICAgICAgICAgMC4wLjE7XG4kdXJsRG9zc2llckZvbnQ6IFx0XHRcdCcuLi9mb250cycgIWRlZmF1bHQ7XG5cbi8vIFJVUFRVUkVTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuJG1pbi1icmVha3BvaW50LW1vYmlsZS13aWRlOiAgICAzMGVtOyAgICAgIC8qIG1pbi1icmVha3BvaW50LW1vYmlsZS13aWRlIDogICAgICA0ODBweCAqL1xuJG1pbi1icmVha3BvaW50LXRhYmxldDogICAgICAgICA0OGVtOyAgICAgIC8qICRtaW4tYnJlYWtwb2ludC10YWJsZXQgOiAgICAgICAgICA3NjhweCAqL1xuJG1pbi1icmVha3BvaW50LWRlc2t0b3A6ICAgICAgICA2MS4yNWVtOyAgIC8qICRtaW4tYnJlYWtwb2ludC1kZXNrdG9wIDogICAgICAgICA5ODBweCAqL1xuJG1pbi1icmVha3BvaW50LWRlc2t0b3Atd2lkZTogICA4MGVtOyAgICAgIC8qICRtaW4tYnJlYWtwb2ludC1kZXNrdG9wLXdpZGUgOiAgICAxMjgwcHggKi9cblxuJG1heC1icmVha3BvaW50LW1vYmlsZS1uYXJyb3c6ICAyOS45MzhlbTsgICAvKiAkbWF4LWJyZWFrcG9pbnQtbW9iaWxlLW5hcnJvdyA6ICA0NzlweCAqL1xuJG1heC1icmVha3BvaW50LW1vYmlsZTogICAgICAgICA0Ny45MzhlbTsgICAvKiAkbWF4LWJyZWFrcG9pbnQtbW9iaWxlIDogICAgICAgICA3NjdweCAqL1xuJG1heC1icmVha3BvaW50LXRhYmxldDogICAgICAgICA2MS4xODhlbTsgICAvKiAkbWF4LWJyZWFrcG9pbnQtdGFibGV0IDogICAgICAgICA5NzlweCAqL1xuJG1heC1icmVha3BvaW50LWRlc2t0b3A6ICAgICAgICA3OS45MzhlbTsgICAvKiAkbWF4LWJyZWFrcG9pbnQtZGVza3RvcCA6ICAgICAgICAxMjc5cHggKi9cblxuLy8gQ09VTEVVUlMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBOVUFOQ0lFUlxuJGJsYW5jOiAgICAgICAgICAgICAgICAgICAgICNmZmYgICAgIWRlZmF1bHQ7XG4kZ3Jpcy10cmVzLWNsYWlyOlx0XHRcdCNlZmVmZWYgIWRlZmF1bHQ7XG4kZ3Jpcy1wbHVzLWNsYWlyOiAgICAgICAgICAgI2Q0ZDRkNCAhZGVmYXVsdDtcbiRncmlzLWNsYWlyOiAgICAgICAgICAgICAgICAjYzFiZmMwICFkZWZhdWx0O1xuJGdyaXM6ICAgICAgICAgICAgICAgICAgICAgICM4Nzg3ODcgIWRlZmF1bHQ7XG4kZ3Jpcy1mb25jZTogICAgICAgICAgICAgICAgIzY2NiAgICAhZGVmYXVsdDtcbiRncmlzLXBsdXMtZm9uY2U6ICAgICAgICAgICAjMzMzICAgICFkZWZhdWx0O1xuJG5vaXI6ICAgICAgICAgICAgICAgICAgICAgICMwMDAgICAgIWRlZmF1bHQ7XG5cbiRyb3VnZTogICAgICAgICAgICAgICAgICAgICAjZTIwMDFhICFkZWZhdWx0O1xuJHJvdWdlLWZvbmNlOiAgICAgICAgICAgICAgICNiNDAwMTUgIWRlZmF1bHQ7XG4kcm91Z2UtcGx1cy1mb25jZTogICAgICAgICAgIzhjMDAxMCAhZGVmYXVsdDtcblxuLy8gQ09VTEVVUlMgRE9NSU5BTlRFU1xuJGNvdWxldXItcHJpbmNpcGFsZS0xOiAkYmxhbmMgICAgICAgICAgICAgICAhZGVmYXVsdDtcbiRjb3VsZXVyLXByaW5jaXBhbGUtMjogJGdyaXMtdHJlcy1jbGFpciAgICAgIWRlZmF1bHQ7XG4kY291bGV1ci1wcmluY2lwYWxlLTM6ICRncmlzLXBsdXMtY2xhaXIgICAgICFkZWZhdWx0O1xuJGNvdWxldXItcHJpbmNpcGFsZS00OiAkZ3Jpcy1jbGFpciAgICAgICAgICAhZGVmYXVsdDtcbiRjb3VsZXVyLXByaW5jaXBhbGUtNTogJGdyaXMgICAgICAgICAgICAgICAgIWRlZmF1bHQ7XG4kY291bGV1ci1wcmluY2lwYWxlLTY6ICRncmlzLWZvbmNlICAgICAgICAgICFkZWZhdWx0O1xuJGNvdWxldXItcHJpbmNpcGFsZS03OiAkZ3Jpcy1wbHVzLWZvbmNlICAgICAhZGVmYXVsdDtcbiRjb3VsZXVyLXByaW5jaXBhbGUtODogJG5vaXIgICAgICAgICAgICAgICAgIWRlZmF1bHQ7XG5cbiRjb3VsZXVyLXNlY29uZGFpcmUtMTogJHJvdWdlICAgICAgICAgICAgICAgIWRlZmF1bHQ7XG4kY291bGV1ci1zZWNvbmRhaXJlLTI6ICRyb3VnZS1mb25jZSAgICAgICAgICFkZWZhdWx0O1xuJGNvdWxldXItc2Vjb25kYWlyZS0zOiAkcm91Z2UtcGx1cy1mb25jZSAgICAhZGVmYXVsdDtcbiRjb3VsZXVyLXNlY29uZGFpcmUtNDogbnVsbCAgICAgICAgICAgICAgICAgIWRlZmF1bHQ7XG5cbi8vIFLDiVNFQVVYIFNPQ0lBVVggRVQgTUFSUVVFU1xuJGZhY2Vib29rOiAgICAgICAgICAjM2I1OTk4ICAgIWRlZmF1bHQ7XG4kdHdpdHRlcjogICAgICAgICAgICM1NWFjZWUgICAhZGVmYXVsdDtcbiRsaW5rZWRpbjogICAgICAgICAgIzBlNzZhOCAgICFkZWZhdWx0O1xuJGdvb2dsZTogICAgICAgICAgICAjZGQ0ODM5ICAgIWRlZmF1bHQ7XG4kZmx1eHJzczogICAgICAgICAgICNmMDgwMWEgICAhZGVmYXVsdDtcbiRzbmFwY2hhdDogICAgICAgICAgI2ZmZmMwMCAgICFkZWZhdWx0O1xuJHZpYWRlbzogICAgICAgICAgICAjZWM3NTAwICAgIWRlZmF1bHQ7XG4keW91dHViZTogICAgICAgICAgICNiYjAwMDAgICAhZGVmYXVsdDtcbiRpbnN0YWdyYW06ICAgICAgICAgI2UyMzA3NiAgICFkZWZhdWx0O1xuJHBpbnRlcmVzdDogICAgICAgICAjY2IyMDI3ICAgIWRlZmF1bHQ7XG4kdmluZTogICAgICAgICAgICAgICMwMGJmOGYgICAhZGVmYXVsdDtcbiR0dW1ibHI6ICAgICAgICAgICAgIzMyNTA2ZCAgICFkZWZhdWx0O1xuJHNvdW5kY2xvdWQ6ICAgICAgICAjRkY2NjAwICAgIWRlZmF1bHQ7XG4kaXR1bmVzOiAgICAgICAgICAgICMwMDAwMDAgICAhZGVmYXVsdDtcbiRmbGlja3I6ICAgICAgICAgICAgIzAwNjNEQyAgICFkZWZhdWx0O1xuJGRhaWx5bW90aW9uOiAgICAgICAjMDA2NmRjICAgIWRlZmF1bHQ7XG5cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVFlQTyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4kZm9udC1mYW1pbHktYmFzZTogICAgICAgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZiAhZGVmYXVsdDtcbiRmb250LWZhbWlseS1zZWNvbmRhaXJlOiBudWxsICFkZWZhdWx0O1xuXG4kZm9udC1zaXplLXJvb3Q6IDEwcHggIWRlZmF1bHQ7Ly8gVmFsZXVyIGVuIHBpeGVsIHBvdXIgcydhZGFwdGVyIGF1IHJlc3BvbnNpdmUuIEFwcGxpcXXDqSDDoCBsJ8OpbMOpbWVudCA8aHRtbD4uXG4kZm9udC1zaXplLXhzbWFsbDogIDEuMnJlbSAhZGVmYXVsdDtcbiRmb250LXNpemUtc21hbGw6ICAgMS40cmVtICFkZWZhdWx0O1xuJGZvbnQtc2l6ZS1tZWRpdW0xOiAxLjZyZW0gIWRlZmF1bHQ7XG4kZm9udC1zaXplLW1lZGl1bTI6IDEuOHJlbSAhZGVmYXVsdDtcbiRmb250LXNpemUtdGFsbDogICAgMi40cmVtICFkZWZhdWx0O1xuJGZvbnQtc2l6ZS14dGFsbDogICAzcmVtICAgIWRlZmF1bHQ7XG4kZm9udC1zaXplLXh4dGFsbDogIDRyZW0gICAhZGVmYXVsdDtcblxuJHNtYWxsZXItZm9udC1zaXplOiA4MCUgIWRlZmF1bHQ7XG5cbiRsaW5lLWhlaWdodC1iYXNlOiAgMS41ICFkZWZhdWx0O1xuXG4kZm9udC13ZWlnaHQtbWFpZ3JlOiAzMDAgIWRlZmF1bHQ7XG4kZm9udC13ZWlnaHQtbWVkaXVtOiA1MDAgIWRlZmF1bHQ7XG4kZm9udC13ZWlnaHQtZ3JhczogICA3MDAgIWRlZmF1bHQ7XG5cbi8vIFRleHRlIHN0YW5kYXJkXG4kY29sb3ItdGV4dGU6ICRjb3VsZXVyLXByaW5jaXBhbGUtOCAhZGVmYXVsdDtcbiRmb250LXNpemUtYmFzZTogJGZvbnQtc2l6ZS1tZWRpdW0xICFkZWZhdWx0O1xuXG4vLyBUaXRyZXNcbiRmb250LWZhbWlseS10aXRyZXM6ICRmb250LWZhbWlseS1zZWNvbmRhaXJlICFkZWZhdWx0O1xuJGNvbG9yLXRpdHJlczogbnVsbCAgICAgICAgICAgICAgIWRlZmF1bHQ7XG4kZm9udC1zaXplLWgxOiAkZm9udC1zaXplLXh4dGFsbCAhZGVmYXVsdDtcbiRtYXJnaW4tYm90dG9tLWgxOiAkZm9udC1zaXplLWgxICogMS4yICAhZGVmYXVsdDtcbiRmb250LXNpemUtaDI6ICRmb250LXNpemUteHRhbGwgICFkZWZhdWx0O1xuJG1hcmdpbi1ib3R0b20taDI6ICRmb250LXNpemUtaDIgKiAxLjEgICFkZWZhdWx0O1xuJGZvbnQtc2l6ZS1oMzogJGZvbnQtc2l6ZS10YWxsICAgIWRlZmF1bHQ7XG4kbWFyZ2luLWJvdHRvbS1oMzogJGZvbnQtc2l6ZS1oMyAqIDEgICFkZWZhdWx0O1xuJGZvbnQtc2l6ZS1oNDogJGZvbnQtc2l6ZS1tZWRpdW0yICAgIWRlZmF1bHQ7XG4kZm9udC1zaXplLWg1OiAkZm9udC1zaXplLWJhc2UgICAhZGVmYXVsdDtcbiRmb250LXNpemUtaDY6ICRmb250LXNpemUtYmFzZSAgICFkZWZhdWx0O1xuJGZvbnQtd2VpZ2h0LXRpdHJlczogJGZvbnQtd2VpZ2h0LW1lZGl1bSAhZGVmYXVsdDtcblxuLy8gTUFSR0VTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL21hcmdpbi1ib3R0b21cbiRtYXJnaW4teHNtYWxsOiAgICAgLjVyZW0gICAhZGVmYXVsdDtcbiRtYXJnaW4tc21hbGw6ICAgICAgMXJlbSAgICAhZGVmYXVsdDtcbiRtYXJnaW4tbWVkaXVtMTogICAgMS41cmVtICAhZGVmYXVsdDtcbiRtYXJnaW4tbWVkaXVtMjogICAgMnJlbSAgICAhZGVmYXVsdDtcbiRtYXJnaW4tbGFyZ2U6ICAgICAgM3JlbSAgICAhZGVmYXVsdDtcbiRtYXJnaW4teGxhcmdlOiAgICAgNHJlbSAgICAhZGVmYXVsdDtcblxuJG1hcmdpbi1zdGFuZGFyZDogJG1hcmdpbi1tZWRpdW0yO1xuJG1hcmdpbi1zdGFuZGFyZC1sYXJnZTogJG1hcmdpbi14bGFyZ2U7XG5cbi8vIE9NQlJFUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuJG9tYnJlLTE6IDAgMCAxMHB4IHJnYmEoMCwwLDAsIC41KSAhZGVmYXVsdDtcblxuXG4vLyBWQVJJQUJMRVMgT0JKRVRTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBCT0RZXG4kYmFja2dyb3VuZC1ib2R5OiBudWxsICFkZWZhdWx0O1xuXG4vLyBMSUVOUyBTVEFOREFSRFNcbiRjb2xvci1saWVuOiAgICAgICAgICRjb3VsZXVyLXByaW5jaXBhbGUtNSAgIWRlZmF1bHQ7XG4kY29sb3ItbGllbi1ob3ZlcjogICAkY291bGV1ci1zZWNvbmRhaXJlLTIgICFkZWZhdWx0O1xuJGNvbG9yLWxpZW4tYWN0aXZlOiAgJGNvbG9yLWxpZW4taG92ZXIgICAgICAhZGVmYXVsdDtcbiRjb2xvci1saWVuLWZvY3VzOiAgICRjb2xvci1saWVuLWhvdmVyICAgICAgIWRlZmF1bHQ7XG4kY29sb3ItbGllbi12aXNpdGVkOiAkY29sb3ItdGV4dGUgICAgICAgICAgICFkZWZhdWx0O1xuXG4vLyBMSUVOUyBORVVUUkVTXG4kY29sb3ItbGllbi1uZXV0cmU6ICAgICAgICAgJGNvbG9yLXRleHRlICAgICAgICAgICAgICAgICFkZWZhdWx0O1xuJGNvbG9yLWxpZW4tbmV1dHJlLWhvdmVyOiAgICRjb2xvci1saWVuLWhvdmVyICAgICAgICAgICAhZGVmYXVsdDtcbiRjb2xvci1saWVuLW5ldXRyZS1hY3RpdmU6ICAkY29sb3ItbGllbi1uZXV0cmUtaG92ZXIgICAgIWRlZmF1bHQ7XG4kY29sb3ItbGllbi1uZXV0cmUtZm9jdXM6ICAgJGNvbG9yLWxpZW4tbmV1dHJlLWhvdmVyICAgICFkZWZhdWx0O1xuJGNvbG9yLWxpZW4tbmV1dHJlLXZpc2l0ZWQ6ICRjb2xvci10ZXh0ZSAgICAgICAgICAgICAgICAhZGVmYXVsdDtcblxuLy8gTElFTlMgw4lESVRPUklBVVhcbiRjb2xvci1saWVuLXZveWFudDogICAgICAgICAkY291bGV1ci1zZWNvbmRhaXJlLTEgICAgICAgIWRlZmF1bHQ7XG4kY29sb3ItbGllbi12b3lhbnQtaG92ZXI6ICAgJGNvbG9yLWxpZW4taG92ZXIgICAgICAgICAgICFkZWZhdWx0O1xuJGNvbG9yLWxpZW4tdm95YW50LWFjdGl2ZTogICRjb2xvci1saWVuLXZveWFudC1ob3ZlciAgICAhZGVmYXVsdDtcbiRjb2xvci1saWVuLXZveWFudC1mb2N1czogICAkY29sb3ItbGllbi12b3lhbnQtaG92ZXIgICAgIWRlZmF1bHQ7XG4kY29sb3ItbGllbi12b3lhbnQtdmlzaXRlZDogJGNvdWxldXItc2Vjb25kYWlyZS0zICAgICAgICFkZWZhdWx0O1xuXG4vLyBCT1VUT05TXG4kYmFja2dyb3VuZC1ib3V0b246ICRjb3VsZXVyLXByaW5jaXBhbGUtMyAgICFkZWZhdWx0O1xuJGNvbG9yLWJvdXRvbjogJGNvdWxldXItcHJpbmNpcGFsZS04ICAgICAgICAhZGVmYXVsdDtcbiRib3JkZXItYm91dG9uOiBudWxsICAgICAgICAgICAgICAgICAgICAgICAgIWRlZmF1bHQ7XG4kcmFkaXVzLWJvdXRvbjogLjNyZW0gICAgICAgICAgICAgICAgICAgICAgICFkZWZhdWx0O1xuJHNoYWRvdy1ib3V0b246IG51bGwgICAgICAgICAgICAgICAgICAgICAgICAhZGVmYXVsdDtcbiRmb250LWZhbWlseS1ib3V0b246IG51bGwgICAgICAgICAgICAgICAgICAgIWRlZmF1bHQ7XG4kZm9udC13ZWlnaHQtYm91dG9uOiAkZm9udC13ZWlnaHQtZ3JhcyAgICAgICFkZWZhdWx0O1xuJHBhZGRpbmctYm91dG9uOiAxLjJyZW0gMnJlbSAgICAgICAgICAgICAgICAhZGVmYXVsdDtcbi8vIGhvdmVyXG4kYmFja2dyb3VuZC1ib3V0b24taG92ZXI6ICRjb3VsZXVyLXByaW5jaXBhbGUtNCAhZGVmYXVsdDtcbiRjb2xvci1ib3V0b24taG92ZXI6ICRjb3VsZXVyLXByaW5jaXBhbGUtOCAgICAgICFkZWZhdWx0O1xuJGJvcmRlci1ib3V0b24taG92ZXI6IG51bGwgICAgICAgICAgICAgICAgICAgICAgIWRlZmF1bHQ7XG4kc2hhZG93LWJvdXRvbi1ob3ZlcjogbnVsbCAgICAgICAgICAgICAgICAgICAgICAhZGVmYXVsdDtcblxuLy8gVEFCTEVBVVhcbiRib3JkZXItdGFibGVhdTogMXB4IHNvbGlkICRjb3VsZXVyLXByaW5jaXBhbGUtMyAgICAgICAgIWRlZmF1bHQ7XG4kcGFkZGluZy10YWJsZWF1OiAkbWFyZ2luLXhzbWFsbCAgICAgICAgICAgICAgICAgICAgICAgICFkZWZhdWx0O1xuJGJvcmRlci10YWJsZWF1LXBsdXM6IDFweCBzb2xpZCAkY291bGV1ci1wcmluY2lwYWxlLTQgICAhZGVmYXVsdDtcbiRiYWNrZ3JvdW5kLXRhYmxlYXUtcGx1cy1oZWFkZXI6ICRjb3VsZXVyLXByaW5jaXBhbGUtMyAgIWRlZmF1bHQ7XG4kYmFja2dyb3VuZC10YWJsZWF1LXBsdXMtZXZlbjogbGlnaHRlbigkY291bGV1ci1wcmluY2lwYWxlLTIsIDUlKSAgICAhZGVmYXVsdDsiLCIvLyBTaXBhVUlcbi8vIGZvbmN0aW9ucyBldCBtaXhpbiBTQVNTXG4vL1xuXG5AbWl4aW4gaG92ZXItYWN0aXZlLWZvY3VzIHtcbiAgICAmOmhvdmVyLFxuICAgICY6YWN0aXZlLFxuICAgICY6Zm9jdXMge1xuICAgICAgICBAY29udGVudFxuICAgIH1cbn1cblxuQG1peGluIGNsZWFyZml4KCkge1xuICAgICY6OmFmdGVyIHtcbiAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgIGRpc3BsYXk6IHRhYmxlO1xuICAgICAgICBjbGVhcjogYm90aDtcbiAgICB9XG59XG5cbi8vIHRyYW5zZm9ybVxuQG1peGluIHRyYW5zZm9ybSgkdHJhbnNmb3Jtcykge1xuICAgIC1tcy10cmFuc2Zvcm06ICR0cmFuc2Zvcm1zO1xuICAgIHRyYW5zZm9ybTogJHRyYW5zZm9ybXM7XG59XG5cbi8vIHRyYW5zaXRpb25cbkBtaXhpbiB0cmFuc2l0aW9uKCR0cmFuc2l0aW9uLi4uKSB7XG4gICAgLXdlYmtpdC10cmFuc2l0aW9uOiAkdHJhbnNpdGlvbjtcbiAgICB0cmFuc2l0aW9uOiAkdHJhbnNpdGlvbjtcbn1cblxuLy8gcm90YXRlXG5AbWl4aW4gcm90YXRlICgkZGVnKSB7XG4gICAgQGluY2x1ZGUgdHJhbnNmb3JtKHJvdGF0ZSgjeyRkZWd9ZGVnKSk7XG59XG5cbi8vIGtleWZyYW1lc1xuQG1peGluIGtleWZyYW1lcygkbmFtZSkge1xuICBALXdlYmtpdC1rZXlmcmFtZXMgI3skbmFtZX0ge1xuICAgIEBjb250ZW50O1xuICB9XG4gIEAtbW96LWtleWZyYW1lcyAjeyRuYW1lfSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbiAgQC1tcy1rZXlmcmFtZXMgI3skbmFtZX0ge1xuICAgIEBjb250ZW50O1xuICB9XG4gIEBrZXlmcmFtZXMgI3skbmFtZX0ge1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cbi8vYW5pbWF0dWlvblxuQG1peGluIGFuaW1hdGlvbiAoJGRlbGF5LCAkZHVyYXRpb24sICR0aW1pbmcsICRpdGVyYXRpb24sICRhbmltYXRpb24pIHtcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1kZWxheTogJGRlbGF5O1xuICAgIC13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOiAkZHVyYXRpb247XG4gICAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogJGFuaW1hdGlvbjtcbiAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ICAkdGltaW5nO1xuICAgIC13ZWJraXQtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogJGl0ZXJhdGlvbjtcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1maWxsLW1vZGU6IGZvcndhcmRzOyAvKiB0aGlzIHByZXZlbnRzIHRoZSBhbmltYXRpb24gZnJvbSByZXN0YXJ0aW5nISAqL1xuXG4gICAgLW1vei1hbmltYXRpb24tZGVsYXk6ICRkZWxheTtcbiAgICAtbW96LWFuaW1hdGlvbi1kdXJhdGlvbjogJGR1cmF0aW9uO1xuICAgIC1tb3otYW5pbWF0aW9uLW5hbWU6ICRhbmltYXRpb247XG4gICAgLW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uIDogJHRpbWluZztcbiAgICAtbW96LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6ICRpdGVyYXRpb247XG4gICAgLW1vei1hbmltYXRpb24tZmlsbC1tb2RlOiBmb3J3YXJkczsgLyogdGhpcyBwcmV2ZW50cyB0aGUgYW5pbWF0aW9uIGZyb20gcmVzdGFydGluZyEgKi9cblxuICAgIC1tcy1hbmltYXRpb24tZGVsYXk6ICRkZWxheTtcbiAgICAtbXMtYW5pbWF0aW9uLWR1cmF0aW9uOiAkZHVyYXRpb247XG4gICAgLW1zLWFuaW1hdGlvbi1uYW1lOiAkYW5pbWF0aW9uO1xuICAgIC1tcy1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiAgJHRpbWluZztcbiAgICAtbXMtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogJGl0ZXJhdGlvbjtcbiAgICAtbXMtYW5pbWF0aW9uLWZpbGwtbW9kZTogZm9yd2FyZHM7IC8qIHRoaXMgcHJldmVudHMgdGhlIGFuaW1hdGlvbiBmcm9tIHJlc3RhcnRpbmchICovXG5cbiAgICBhbmltYXRpb24tZGVsYXk6ICRkZWxheTtcbiAgICBhbmltYXRpb24tZHVyYXRpb246ICRkdXJhdGlvbjtcbiAgICBhbmltYXRpb24tbmFtZTogJGFuaW1hdGlvbjtcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiAgJHRpbWluZztcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiAkaXRlcmF0aW9uO1xuICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGZvcndhcmRzOyAvKiB0aGlzIHByZXZlbnRzIHRoZSBhbmltYXRpb24gZnJvbSByZXN0YXJ0aW5nISAqL1xufVxuXG5cbi8vIHRyYW5zZm9ybSBvcmlnaW5cbkBtaXhpbiB0cmFuc2Zvcm0tb3JpZ2luICgkb3JpZ2luKSB7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiAkb3JpZ2luO1xuICAgIC1tcy10cmFuc2Zvcm0tb3JpZ2luOiAkb3JpZ2luO1xuICAgIHRyYW5zZm9ybS1vcmlnaW46ICRvcmlnaW47XG59XG5cbi8vIGFwcGVhcmVuY2VcbkBtaXhpbiBhcHBlYXJhbmNlICgkYXBwZWFyYW5jZSkge1xuICAgIC1tb3otYXBwZWFyYW5jZTogJGFwcGVhcmFuY2U7XG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiAkYXBwZWFyYW5jZTtcbiAgICAtbXMtYXBwZWFyYW5jZTogJGFwcGVhcmFuY2U7XG4gICAgYXBwZWFyYW5jZTogJGFwcGVhcmFuY2U7XG59XG5cbi8vIGTDqWdyYWTDqSBob3Jpem9udGFsXG5AbWl4aW4gZ3JhZGllbnQtaG9yaXpvbnRhbCgkc3RhcnQtY29sb3IsICRlbmQtY29sb3IsICRzdGFydC1wZXJjZW50LCAkZW5kLXBlcmNlbnQpIHtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudChsZWZ0LCAkc3RhcnQtY29sb3IgJHN0YXJ0LXBlcmNlbnQsICRlbmQtY29sb3IgJGVuZC1wZXJjZW50KTtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiAtby1saW5lYXItZ3JhZGllbnQobGVmdCwgJHN0YXJ0LWNvbG9yICRzdGFydC1wZXJjZW50LCAkZW5kLWNvbG9yICRlbmQtcGVyY2VudCk7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAkc3RhcnQtY29sb3IgJHN0YXJ0LXBlcmNlbnQsICRlbmQtY29sb3IgJGVuZC1wZXJjZW50KTtcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogcmVwZWF0LXg7XG4gICAgZmlsdGVyOiBwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuZ3JhZGllbnQoc3RhcnRDb2xvcnN0cj0nI3tpZS1oZXgtc3RyKCRzdGFydC1jb2xvcil9JywgZW5kQ29sb3JzdHI9JyN7aWUtaGV4LXN0cigkZW5kLWNvbG9yKX0nLCBHcmFkaWVudFR5cGU9MSk7IC8vIElFOSBhbmQgZG93blxufVxuLy8gZMOpZ3JhZMOpIHZlcnRpY2FsXG5AbWl4aW4gZ3JhZGllbnQtdmVydGljYWwoJHN0YXJ0LWNvbG9yLCAkZW5kLWNvbG9yLCAkc3RhcnQtcGVyY2VudCwgJGVuZC1wZXJjZW50KSB7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogLXdlYmtpdC1saW5lYXItZ3JhZGllbnQodG9wLCAkc3RhcnQtY29sb3IgJHN0YXJ0LXBlcmNlbnQsICRlbmQtY29sb3IgJGVuZC1wZXJjZW50KTtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiAtby1saW5lYXItZ3JhZGllbnQodG9wLCAkc3RhcnQtY29sb3IgJHN0YXJ0LXBlcmNlbnQsICRlbmQtY29sb3IgJGVuZC1wZXJjZW50KTtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tLCAkc3RhcnQtY29sb3IgJHN0YXJ0LXBlcmNlbnQsICRlbmQtY29sb3IgJGVuZC1wZXJjZW50KTtcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogcmVwZWF0LXg7XG4gICAgZmlsdGVyOiBwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuZ3JhZGllbnQoc3RhcnRDb2xvcnN0cj0nI3tpZS1oZXgtc3RyKCRzdGFydC1jb2xvcil9JywgZW5kQ29sb3JzdHI9JyN7aWUtaGV4LXN0cigkZW5kLWNvbG9yKX0nLCBHcmFkaWVudFR5cGU9MCk7IC8vIElFOSBhbmQgZG93blxufVxuXG4vLyBhcnJvd1xuQG1peGluIGFycm93KCRkaXJlY3Rpb246IHRvcCwgJHNpemU6IDEwcHgsICRjb2xvcjogI2NjYywgJGNlbnRlcjogNTAlLCAkbWFyZ2luOiAtMXB4LCAkcHNldWRvOiBiZWZvcmUpe1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAvL2JvcmRlci1jb2xvcjogJGNvbG9yO1xuXG4gICAgJjojeyRwc2V1ZG99IHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICBjb250ZW50OiBcIlwiO1xuICAgICAgICB3aWR0aDogMDtcbiAgICAgICAgaGVpZ2h0OiAwO1xuICAgICAgICBib3JkZXItY29sb3I6ICRjb2xvcjtcblxuICAgICAgICBAaWYgJGRpcmVjdGlvbiA9PSBcInJpZ2h0XCIge1xuICAgICAgICAgICAgdG9wOiAkY2VudGVyO1xuICAgICAgICAgICAgbGVmdDogMTAwJTtcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAkbWFyZ2luO1xuICAgICAgICAgICAgbWFyZ2luLXRvcDogJHNpemUgKiAtMTtcbiAgICAgICAgICAgIGJvcmRlci10b3A6ICRzaXplIHNvbGlkIHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogJHNpemUgc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICBib3JkZXItbGVmdDogJHNpemUgc29saWQgJGNvbG9yO1xuICAgICAgICAgICAgYm9yZGVyLWxlZnQtY29sb3I6IGluaGVyaXQ7XG4gICAgICAgIH0gQGVsc2UgaWYgJGRpcmVjdGlvbiA9PSBcImJvdHRvbVwiIHtcbiAgICAgICAgICAgIHRvcDogMTAwJTtcbiAgICAgICAgICAgIGxlZnQ6ICRjZW50ZXI7XG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAkbWFyZ2luO1xuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6ICRzaXplICogLTE7XG4gICAgICAgICAgICBib3JkZXItbGVmdDogJHNpemUgc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICBib3JkZXItcmlnaHQ6ICRzaXplIHNvbGlkIHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgYm9yZGVyLXRvcDogJHNpemUgc29saWQgJGNvbG9yO1xuICAgICAgICB9IEBlbHNlIGlmICRkaXJlY3Rpb24gPT0gXCJsZWZ0XCIge1xuICAgICAgICAgICAgdG9wOiAkY2VudGVyO1xuICAgICAgICAgICAgcmlnaHQ6IDEwMCU7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6ICRtYXJnaW47XG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAkc2l6ZSAqIC0xO1xuICAgICAgICAgICAgYm9yZGVyLXRvcDogJHNpemUgc29saWQgJGNvbG9yO1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogJHNpemUgc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICBib3JkZXItcmlnaHQ6JHNpemUgc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgICAgIH0gQGVsc2UgaWYgJGRpcmVjdGlvbiA9PSBcInRvcFwiIHtcbiAgICAgICAgICAgIGJvdHRvbTogMTAwJTtcbiAgICAgICAgICAgIGxlZnQ6ICRjZW50ZXI7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAkbWFyZ2luO1xuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6ICRzaXplICogLTE7XG4gICAgICAgICAgICBib3JkZXItbGVmdDogJHNpemUgc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICBib3JkZXItcmlnaHQ6ICRzaXplIHNvbGlkIHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogJHNpemUgc29saWQgJGNvbG9yO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbi8vIHBvdXIgbGVzIGhpZGUgZXQgc2hvdyBzZWxvbiBsZXMgYnJlYWtwb2ludHNcbkBtaXhpbiByZXNwb25zaXZlLXZpc2liaWxpdHkoJHBhcmVudCkge1xuICAjeyRwYXJlbnR9IHtcbiAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xuICB9XG4gIHRhYmxlI3skcGFyZW50fSAgeyBkaXNwbGF5OiB0YWJsZSAhaW1wb3J0YW50OyB9XG4gIHRyI3skcGFyZW50fSAgICAgeyBkaXNwbGF5OiB0YWJsZS1yb3cgIWltcG9ydGFudDsgfVxuICB0aCN7JHBhcmVudH0sXG4gIHRkI3skcGFyZW50fSAgICAgeyBkaXNwbGF5OiB0YWJsZS1jZWxsICFpbXBvcnRhbnQ7IH1cbn1cblxuLy8gW2NvbnZlcnRlcl0gJHBhcmVudCBoYWNrXG5AbWl4aW4gcmVzcG9uc2l2ZS1pbnZpc2liaWxpdHkoJHBhcmVudCkge1xuICAjeyRwYXJlbnR9IHtcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XG4gIH1cbn1cblxuXG4vLyBUUk9OQ0FUVVJFUyDigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJRcbi8vIHRyb25jYXR1cmUgMSBsaWduZVxuQG1peGluIHRydW5jYXRlICgkd2lkdGgtdHJ1bmNhdGUpIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIHdpZHRoOiAkd2lkdGgtdHJ1bmNhdGU7XG59XG5cbi8vIGhhdXRldXIgZMOpcm91bMOpZSBhdmVjIHRyYW5zaXRpb25cbkBtaXhpbiB0cmFuc2l0aW9uZWRIZWlnaHQgKCRsaW5lSGVpZ2h0LCAkbGluZUNvdW50OiAxLCAkZWFzaW5nOiBjdWJpYy1iZXppZXIoMC43NywgMCwgMC4xNzUsIDEpKSB7XG4gICAgQGluY2x1ZGUgdHJhbnNpdGlvbihtYXgtaGVpZ2h0IDAuMjVzICRlYXNpbmcgMHMpO1xuICAgIG1pbi1oZWlnaHQ6ICRsaW5lSGVpZ2h0ICogJGxpbmVDb3VudDtcbiAgICBtYXgtaGVpZ2h0OiAkbGluZUhlaWdodCAqICRsaW5lQ291bnQ7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcblxuICAgICYub3V2ZXJ0IHtcbiAgICAgICAgbWF4LWhlaWdodDogMjAwcmVtO1xuICAgICAgICAmOmJlZm9yZSxcbiAgICAgICAgJjphZnRlciB7XG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyB0cm9uY2F0dXJlIG11bHRpbGlnbmUgLy9cbkBtaXhpbiBtdWx0aUxpbmVFbGxpcHNpcygkbGluZUhlaWdodDogMS42ZW0sICRsaW5lQ291bnQ6IDEsICRiZ0NvbG9yOiB3aGl0ZSl7XG4gICAgQGluY2x1ZGUgdHJhbnNpdGlvbmVkSGVpZ2h0KCRsaW5lSGVpZ2h0ICogJGxpbmVDb3VudCk7XG4gICAgbGluZS1oZWlnaHQ6ICRsaW5lSGVpZ2h0O1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBoeXBoZW5zOiBhdXRvO1xuICAgIHBhZGRpbmctcmlnaHQ6IDEuNXJlbTtcblxuICAgICY6YmVmb3JlLFxuICAgICY6YWZ0ZXIge1xuICAgICAgICBAaW5jbHVkZSB0cmFuc2l0aW9uKG9wYWNpdHkgMC4yNXMgY3ViaWMtYmV6aWVyKDAuNzcsIDAsIDAuMTc1LCAxKSAwcyk7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgfVxuICAgICY6YmVmb3JlIHtcbiAgICAgICAgY29udGVudDogJyAnO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICBib3R0b206IDA7XG4gICAgICAgIHdpZHRoOiAycmVtO1xuICAgICAgICBoZWlnaHQ6IDJyZW07XG4gICAgICAgIG1hcmdpbi10b3A6IDAuMnJlbTtcbiAgICAgICAgYmFja2dyb3VuZDogJGJnQ29sb3I7XG4gICAgfVxuICAgICY6YWZ0ZXIge1xuICAgICAgICBjb250ZW50OiAnLi4uJztcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICByaWdodDogMDtcbiAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICB3aWR0aDogMnJlbTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDEuNGVtO1xuICAgICAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICB9XG59XG5cbi8vIFBlcm1ldCBkZSBzJ2Fzc3VyZXIgcXUndW4gdGV4dGUgbmUgZMOpcGFzc2UgcGFzIChjb3VwZSBzZWNoZSwgc2FucyBsZXMgXCIuLi5cIiBxdWkgb250IGJlc29pbiBkJ3VuIHRleHRlIGp1c3RpZmnDqSlcbkBtaXhpbiBtdWx0aUxpbmVUcnVuY2F0ZSgkbGluZUhlaWdodDogMS42ZW0sICRsaW5lQ291bnQ6IDEpe1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGxpbmUtaGVpZ2h0OiAkbGluZUhlaWdodDtcbiAgICBoZWlnaHQ6ICRsaW5lSGVpZ2h0ICogJGxpbmVDb3VudDtcbn1cblxuLy8gQ09MVU1OIE1PREVMIOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlFxuLy9jb2x1bW5cbkBtaXhpbiBjb2x1bW4tY291bnQoJGNvbHVtbi1jb3VudCkge1xuICAgIC1tb3otY29sdW1uLWNvdW50OiAkY29sdW1uLWNvdW50O1xuICAgIC13ZWJraXQtY29sdW1uLWNvdW50OiAkY29sdW1uLWNvdW50O1xuICAgIGNvbHVtbi1jb3VudDogJGNvbHVtbi1jb3VudDtcbn1cbi8vIGNvbHVtbl9nYXBcbkBtaXhpbiBjb2x1bW4tZ2FwKCRjb2x1bW4tZ2FwKSB7XG4gICAgLW1vei1jb2x1bW4tZ2FwOiAkY29sdW1uLWdhcDtcbiAgICAtd2Via2l0LWNvbHVtbi1nYXA6ICRjb2x1bW4tZ2FwO1xuICAgIGNvbHVtbi1nYXA6ICRjb2x1bW4tZ2FwO1xufVxuXG4vLyBGTEVYQk9YIE1PREVMIOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlFxuQG1peGluIGZsZXhEaXNwbGF5KCkge1xuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAgIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcbiAgICBkaXNwbGF5OiBmbGV4O1xufVxuXG5AbWl4aW4gZmxleERpcmVjdGlvbigkZmxleERpcmVjdGlvbiwgJGZsZXhEaXJlY3Rpb25PbGQpIHtcbiAgICAtd2Via2l0LWJveC1vcmllbnQ6ICRmbGV4RGlyZWN0aW9uT2xkOyAvLyBob3Jpem9udGFsLCB2ZXJ0aWNhbFxuICAgIC13ZWJraXQtZmxleC1kaXJlY3Rpb246ICRmbGV4RGlyZWN0aW9uOyAvLyByb3csIGNvbHVtblxuICAgIGZsZXgtZGlyZWN0aW9uOiAkZmxleERpcmVjdGlvbjtcbn1cblxuQG1peGluIGZsZXhBbGlnbigkZmxleEFsaWduKSB7XG4gICAgLXdlYmtpdC1ib3gtYWxpZ246ICRmbGV4QWxpZ247IC8vZmxleC1zdGFydCwgZmxleC1lbmQsIGNlbnRlciwgYmFzZWxpbmUsIHN0cmV0Y2hcbiAgICAtd2Via2l0LWFsaWduLWl0ZW1zOiAkZmxleEFsaWduO1xuICAgIGFsaWduLWl0ZW1zOiAkZmxleEFsaWduO1xufVxuXG5AbWl4aW4gZmxleEp1c3RpZnkoJGZsZXhKdXN0aWZ5LCAkZmxleEp1c3RpZnlPbGQpIHtcbiAgICAtd2Via2l0LWJveC1wYWNrOiAkZmxleEp1c3RpZnlPbGQ7IC8vc3RhcnQsIGVuZCwgY2VudGVyLCBqdXN0aWZ5XG4gICAgLXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6ICRmbGV4SnVzdGlmeTsgLy9mbGV4LXN0YXJ0LCBmbGV4LWVuZCwgY2VudGVyLCBzcGFjZS1iZXR3ZWVuLCBzcGFjZS1hcm91bmRcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6ICRmbGV4SnVzdGlmeTtcbn1cblxuQG1peGluIGZsZXhXcmFwKCRmbGV4V3JhcCkgeyAvLyBub3QgcG9zc2libGUgd2l0aCB0aGUgMjAwOSBtb2RlbCBmb3IgYW5kcm9pZCBwcmUgNC40XG4gICAgLXdlYmtpdC1mbGV4LXdyYXA6ICRmbGV4V3JhcDsgLy8gbm8td3JhcCwgd3JhcCwgd3JhcC1yZXZlcnNlXG4gICAgZmxleC13cmFwOiAkZmxleFdyYXA7XG59XG5cbkBtaXhpbiBmbGV4T3JkZXIoJGZsZXhPcmRlcikge1xuICAgIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6ICRmbGV4T3JkZXI7XG4gICAgLXdlYmtpdC1vcmRlcjogJGZsZXhPcmRlcjtcbiAgICBvcmRlcjogJGZsZXhPcmRlcjtcbn1cblxuQG1peGluIGZsZXhBbGlnblNlbGYoJGZsZXhBbGlnblNlbGYpIHtcbiAgICAtd2Via2l0LWFsaWduLXNlbGY6ICRmbGV4QWxpZ25TZWxmOyAvL2ZvciBmbGV4J3MgY2hpbGRzIDogZmxleC1zdGFydCwgZmxleC1lbmQsIGNlbnRlciwgYmFzZWxpbmUsIHN0cmV0Y2hcbiAgICBhbGlnbi1zZWxmOiAkZmxleEFsaWduU2VsZjtcbn1cblxuQG1peGluIGZsZXhGbGV4VmFsdWUoJGZsZXhGbGV4VmFsdWUpIHtcbiAgICAtd2Via2l0LWJveC1mbGV4OiAkZmxleEZsZXhWYWx1ZTsgLy9mb3IgZmxleCdzIGNoaWxkcyA6IDAgPSBub3Qgc2l6ZWQsIGludGVnZXIgKDEpID0gc2l6ZWQgdG8gZmlsbCB0aGUgc3BhY2VcbiAgICAtd2Via2l0LWZsZXg6ICRmbGV4RmxleFZhbHVlO1xuICAgIGZsZXg6ICRmbGV4RmxleFZhbHVlO1xufVxuIiwiLy8gU2lwYVVJXG4vLyBUYWJsZXR0ZXMgZXQgcGV0aXRzIGRlc2t0b3Bcbi8vXG5cbi8qIFBvaW50IGRlIHJ1cHR1cmUgZGVza3RvcCAoOTgwcHgpICovXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICRtaW4tYnJlYWtwb2ludC1kZXNrdG9wKSB7XG5cbn0iLCIvLyBTaXBhVUlcbi8vIEdyYW5kcyBkZXNrdG9wc1xuLy9cblxuLyogUG9pbnQgZGUgcnVwdHVyZSBkZXNrdG9wICg5ODBweCkgKi9cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogJG1pbi1icmVha3BvaW50LWRlc2t0b3Atd2lkZSkge1xuXG59IiwiLy8gU2l0ZSBTaXBhVUlcbi8vIENTUyBwb3VyIMOpY3JhbnMgbGFyZ2VzIHNww6ljaWZpcXVlcyBhdSBwcm9qZXRcbi8vXG5cbi8qIFBvaW50IGRlIHJ1cHR1cmUgZGVza3RvcCAoOTgwcHgpICovXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICRtaW4tYnJlYWtwb2ludC1kZXNrdG9wKSB7XG4gICAgYm9keSB7XG4gICAgICAgIG1hcmdpbjogMXJlbSBhdXRvO1xuICAgICAgICB3aWR0aDogODAlO1xuICAgIH1cbn1cblxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBR1cyQyw2Q0FBNkM7QUFDN0MsNkNBQTZDO0FBQzdDLDZDQUE2QztBQUM3Qyw4Q0FBOEM7QUFFN0MsNENBQTRDO0FBQzVDLDRDQUE0QztBQUM1Qyw0Q0FBNEM7QUFDNUMsNkNBQTZDO0FEZnpGLG1EQUFtRDtBQUNuRCxxQkFBMkI7QUdEM0Isc0NBQXNDO0FDQXRDLHNDQUFzQztBQ0F0QyxzQ0FBc0M7QUFDdEMsTUFBTSxNQUFNLE1BQU0sTUFBTSxTQUFTLEVBQUUsT0FBTztFQUN0QyxBQUFBLElBQUksQ0FBQztJQUNELE1BQU0sRUFBRSxTQUFTO0lBQ2pCLEtBQUssRUFBRSxHQUFHLEdBQ2IifQ== */
